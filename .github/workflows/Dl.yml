name: Upload file
on:
  workflow_dispatch:
    inputs:
      upl:
        description: 'Direct links separated by commas'
        required: true
        type: string
      tag:
        description: 'Tag'
        required: true
        type: string
      compression:
        description: 'Compression method'
        required: false
        type: choice
        options:
          - none
          - tar
          - gzip
          - bzip2
          - xz
          - rar
          - 7z
          - zip
      compress_level:
        description: 'Compression level (1-9)'
        required: false
        type: string
        default: ''

permissions:
  contents: write

jobs:
  download:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Cached APT
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: aria2 gh p7zip-full xz-utils
          
      - name: Download files
        run: |
          mkdir -p dloa
          IFS=$'\n'
          pids=()

          prepare_url() {
              local url="$1"
              if [[ ! "$url" =~ ^https?:// ]]; then
                  url="https://$url"
              fi
              echo "$url"
          }

          echo "${{ github.event.inputs.upl }}" | tr ',' '\n' | while IFS= read -r url; do
              prepared_url=$(prepare_url "$url")

              echo "Preparing to download: $prepared_url"

              aria2c \
                --max-tries=5 \
                --retry-wait=5 \
                --continue=true \
                --max-concurrent-downloads=5 \
                --max-connection-per-server=4 \
                --split=8 \
                --min-split-size=5M \
                -d dloa \
                --log-level=debug \
                "$prepared_url" &
    
              pids+=($!)
          done

          for pid in "${pids[@]}"; do
              wait $pid

              if [ $? -eq 0 ]; then
                  echo "Download succeeded for PID: $pid"
              else
                  echo "Download failed for PID: $pid" >&2
              fi
          done
      
      - name: Check files in dloa directory
        run: |
          echo "Files in dloa directory:"
          find dloa/ -maxdepth 1 -type f -exec stat --format="%n %s" {} \; | while read filename size; do
            human_readable_size=$(numfmt --to=iec $size)
            echo "$filename $human_readable_size ($size bytes)"
          done
          
      - name: File compression archive
        run: |
          echo "Compressing files..."
          temp_dir=$(mktemp -d)

          if [ "${{ inputs.compression }}" != "none" ]; then
            for file in dloa/*; do
              filename=$(basename "$file")
              sanitized_filename=$(echo "$filename" | sed 's/[^a-zA-Z0-9._-]/_/g')

              case "${{ inputs.compression }}" in
                gzip) 
                  tar -cvf - "$file" | gzip -${{ inputs.compress_level }} > "$temp_dir/$sanitized_filename.tar.gz"
                  ;;
                bzip2) 
                  tar -cvf "$temp_dir/$sanitized_filename.tar" -C dloa "$filename"
                  bzip2 -${{ inputs.compress_level }} "$temp_dir/$sanitized_filename.tar"
                  ;;
                xz) 
                  tar -cvf "$temp_dir/$sanitized_filename.tar" -C dloa "$filename"
                  xz -${{ inputs.compress_level }} "$temp_dir/$sanitized_filename.tar"
                  ;;
               rar)  
                  7z a -m0=rar -mx${{ inputs.compress_level }} "$temp_dir/$sanitized_filename.rar" "$file" 
                  ;;
               7z) 
                  7z a -mx${{ inputs.compress_level }} "$temp_dir/$sanitized_filename.7z" "$file" 
                  ;;
               zip) 
                  7z a -tzip -mx${{ inputs.compress_level }} "$temp_dir/$sanitized_filename.zip" "$file" 
                  ;;
                tar) 
                  tar -cvf "$temp_dir/$sanitized_filename.tar" -C dloa "$filename"
                  ;;  
               esac
            done

            echo "Removing original files..."
            rm -rf dloa/*

            echo "Moving compressed files to dloa..."
            mv "$temp_dir"/* dloa/

            rmdir "$temp_dir"
      
          else
            echo "No compression selected."
          fi

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload files to release
        run: |
          IFS=$'\n'
          if [ "$(find dloa -type f | wc -l)" -gt 0 ]; then
            find dloa -type f -print0 | xargs -0 -n 4 -P 4 -I {} gh release upload "${{ github.event.inputs.tag }}" "{}" --clobber
          else
            echo "No files found in dloa directory."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
