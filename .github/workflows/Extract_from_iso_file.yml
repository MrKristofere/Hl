name: Download and Extract ISO Files
on:
  workflow_dispatch:
    inputs:
      iso_url:
        description: 'URL of the ISO file to download'
        required: true
      tag:
        description: 'Tag'
        required: true
        type: string
        default: '32'
      extract_exe:
        description: 'Extract *.exe files?'
        type: boolean
        default: 'false'

permissions:
  contents: write
  packages: write

jobs:
  download_and_extract:
    runs-on: ubuntu-latest
    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y aria2 p7zip-full python3

      - name: Create Download Directory
        run: mkdir -p ${{ github.workspace }}/download

      - name: Download ISO
        run: |
          aria2c "${{ github.event.inputs.iso_url }}" -d ${{ github.workspace }}/download || { echo "Download failed"; exit 1; }
          echo "Downloaded ISO files:"
          find ${{ github.workspace }}/download -type f | while read -r file; do
            file_size_human=$(stat -c "%s" "$file")
            file_size_readable=$(stat -c "%s" "$file" | numfmt --to=iec)
            echo "$file $file_size_readable ($file_size_human bytes)"
          done

      - name: Verify Downloaded ISO
        run: |
          for file in ${{ github.workspace }}/download/*; do
            crc32_value=$(python3 -c "
          import zlib
          with open('$file', 'rb') as f:
              print(f'{zlib.crc32(f.read()):08X}')
          ")
            echo "File: $file, CRC32: $crc32_value"
          done
        continue-on-error: true

      - name: Create Mount Point
        run: mkdir -p ${{ github.workspace }}/download/mnt/iso

      - name: View ISO Contents
        run: |
          ISO_FILE=$(find ${{ github.workspace }}/download -name "*.iso" -type f | head -n 1)
          if [ -z "$ISO_FILE" ]; then
            echo "No ISO file found!"
            exit 1
          fi
          echo "ISO file found: $ISO_FILE"

          echo "Listing contents of ISO file:"
          7z l "$ISO_FILE" || { echo "Failed to list ISO contents."; exit 1; }

      - name: Extract Specific Files from ISO
        run: |
          ISO_FILE=$(find ${{ github.workspace }}/download -name "*.iso" -type f | head -n 1)
          if [ -z "$ISO_FILE" ]; then
            echo "No ISO file found!"
            exit 1
          fi
          echo "ISO file found: $ISO_FILE"

          mkdir -p ${{ github.workspace }}/download/extracted_files

          EXTENSIONS="*.dll *.ini"
          [ "${{ github.event.inputs.extract_exe }}" == "true" ] && EXTENSIONS+=" *.exe"

          echo "Extracting files: $EXTENSIONS"
          7z x "$ISO_FILE" -o"${{ github.workspace }}/download/extracted_files" -r -y $EXTENSIONS || { echo "Failed to extract files."; exit 1; }

          echo "Extracted files:"
          find ${{ github.workspace }}/download/extracted_files -type f | while read -r file; do
            file_size_human=$(stat -c "%s" "$file")
            file_size_readable=$(numfmt --to=iec <<< "$file_size_human")
            echo "$file $file_size_readable ($file_size_human bytes)"
          done

      - name: Verify Extracted files
        run: |
          find ${{ github.workspace }}/download/extracted_files -type f | while read -r file; do
              crc32_value=$(python3 -c "
          import zlib
          with open('$file', 'rb') as f:
              print(f'{zlib.crc32(f.read()):08X}')
             ")
              echo "File: $file, CRC32: $crc32_value"
          done
        continue-on-error: true

      - name: Make Archive
        run: |
          7z a -mx=6 -mmt=on filebase.7z "${{ github.workspace }}/download/extracted_files/*"
          7z l filebase.7z
          
      - name: Upload to GitHub Releases
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "${{ github.event.inputs.tag }}"
          files: |
            ${{ github.workspace }}/download/extracted_files/filebase.7z
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
