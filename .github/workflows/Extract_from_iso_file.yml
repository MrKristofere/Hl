name: Download and Extract ISO Files
on:
  workflow_dispatch:
    inputs:
      iso_url:
        description: 'URL of the ISO file to download'
        required: true

permissions:
  contents: write
  packages: write

jobs:
  download_and_extract:
    runs-on: ubuntu-latest
    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y aria2 p7zip-full fuse fuseiso udisks2 python3

      - name: Create Download Directory
        run: mkdir -p ${{ github.workspace }}/download

      - name: Download ISO
        run: |
          aria2c "${{ github.event.inputs.iso_url }}" -d ${{ github.workspace }}/download || { echo "Download failed"; exit 1; }
          echo "Downloaded ISO files:"
          find ${{ github.workspace }}/download

      - name: Verify Downloaded ISO
        run: |
          for file in ${{ github.workspace }}/download/*; do
            crc32_value=$(python3 -c "
          import zlib
          with open('$file', 'rb') as f:
              print(f'{zlib.crc32(f.read()):08X}')
          ")
            echo "File: $file, CRC32: $crc32_value"
          done
        continue-on-error: true

      - name: Create Mount Point
        run: mkdir -p ${{ github.workspace }}/download/mnt/iso

      - name: View ISO Contents
        run: |
          ISO_FILE=$(find ${{ github.workspace }}/download -name "*.iso" -type f | head -n 1)
          if [ -z "$ISO_FILE" ]; then
            echo "No ISO file found!"
            exit 1
          fi
          echo "ISO file found: $ISO_FILE"

          # Просмотр содержимого ISO с помощью 7z
          echo "Listing contents of ISO file:"
          7z l "$ISO_FILE" | grep -E "\.dll$|\.emu$|\.ini$" || { echo "Failed to list ISO contents."; exit 1; }

      - name: Extract Specific Files from ISO
        run: |
          ISO_FILE=$(find ${{ github.workspace }}/download -name "*.iso" -type f | head -n 1)
          if [ -z "$ISO_FILE" ]; then
            echo "No ISO file found!"
            exit 1
          fi
          echo "ISO file found: $ISO_FILE"

          # Создаем директорию для извлеченных файлов
          mkdir -p ${{ github.workspace }}/download/extracted_files

          # Извлекаем только .dll, .emu и .ini файлы
          7z x "$ISO_FILE" -o"${{ github.workspace }}/download/extracted_files" -r -y "*.dll" "*.emu" "*.ini" || { echo "Failed to extract files."; exit 1; }

          echo "Extracted files:"
          find ${{ github.workspace }}/download/extracted_files

      - name: Filter and Process Files
        id: filter_files
        run: |
          chmod -R 755 ${{ github.workspace }}/download/extracted_files
          echo "Filtering extracted files extensions"

          if [ ! -d "${{ github.workspace }}/download/extracted_files" ]; then
            echo "Directory extracted_files does not exist."
            exit 1
          fi

          # Перемещаем файлы с нужными расширениями в корень extracted_files
          find "${{ github.workspace }}/download/extracted_files" -type f -name "*.dll" -o -name "*.emu" -o -name "*.ini" -exec mv {} "${{ github.workspace }}/download/extracted_files/" \;

          # Проверка наличия файлов после перемещения
          DLL_FILES=$(find "${{ github.workspace }}/download/extracted_files" -maxdepth 1 -type f -name "*.dll")
          EMU_FILES=$(find "${{ github.workspace }}/download/extracted_files" -maxdepth 1 -type f -name "*.emu")
          INI_FILES=$(find "${{ github.workspace }}/download/extracted_files" -maxdepth 1 -type f -name "*.ini")

          if [ -z "$DLL_FILES" ] && [ -z "$EMU_FILES" ] && [ -z "$INI_FILES" ]; then
            echo "No .dll or .emu or .ini files found."
            echo "upload_files=false" >> $GITHUB_ENV
          else
            echo "DLL files found:"
            echo "$DLL_FILES"

            echo "EMU files found:"
            echo "$EMU_FILES"

            echo "INI files found:"
            echo "$INI_FILES"

            echo "upload_files=true" >> $GITHUB_ENV
          fi

      - name: Upload to GitHub Releases
        if: env.upload_files == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v32"
          files: |
            ${{ github.workspace }}/download/extracted_files/*.dll
            ${{ github.workspace }}/download/extracted_files/*.emu
            ${{ github.workspace }}/download/extracted_files/*.ini
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
