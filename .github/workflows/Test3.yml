name: Download and Process Files
on:
  workflow_dispatch:
    inputs:
      upl:
        description: 'Comma-separated list of URLs'
        required: true
        type: string
      tag:
        description: 'Tag for GitHub release'
        required: true
        type: string
      parallel_downloads:
        description: 'Number of parallel downloads'
        required: true
        type: string
      destination:
        description: 'Choose where to upload the files (GitHub, Telegram, Mega, Google Drive, Dropbox)'
        required: true
        type: string
        options:
          - github
          - telegram
          - mega
          - google_drive
          - dropbox
          - both

permissions:
  contents: write
  actions: write

jobs:
  download_and_process:
    runs-on: ubuntu-latest
    steps:
      - name: Setup
        run: |
          sudo apt-get update
          sudo apt-get install -y aria2 curl unzip p7zip-full jq
          mkdir -p dloa  # Create a directory for downloads

      - name: Validate input URLs
        run: |
          if [ -z "${{ inputs.upl }}" ]; then
            echo "Error: No URLs provided."
            exit 1
          fi

      - name: Validate parallel_downloads
        run: |
          if ! [[ "${{ inputs.parallel_downloads }}" =~ ^[0-9]+$ ]] || [ "${{ inputs.parallel_downloads }}" -le 0 ]; then
            echo "Error: parallel_downloads must be a positive integer."
            exit 1
          fi

      - name: Prepare URL list
        run: |
          CLEANED_URLS=$(echo "${{ inputs.upl }}" | sed 's/ \+/ /g' | sed 's/ ,/,/g')
          IFS=',' read -ra URLS <<< "$CLEANED_URLS"
          echo "Number of URLs: ${#URLS[@]}"

      - name: Download files
        run: |
          MAX_PARALLEL_DOWNLOADS=${{ inputs.parallel_downloads }}
          RETRIES=3
          INITIAL_DELAY=2

          download_with_retries() {
            url=$1
            retries=0
            until aria2c -d dloa -x 16 -s 16 --continue=true "$url"; do
              if (( retries >= RETRIES )); then
                echo "Error: Failed to download $url after $RETRIES attempts."
                return 1
              fi
              retries=$((retries + 1))
              sleep_time=$((INITIAL_DELAY ** retries))
              echo "Retrying download of $url ($retries/$RETRIES). Waiting for $sleep_time seconds."
              sleep $sleep_time
            done
            return 0
          }

          COUNTER=0
          for url in "${URLS[@]}"; do
            download_with_retries "$url" & 
            COUNTER=$((COUNTER + 1))
            if (( COUNTER >= MAX_PARALLEL_DOWNLOADS )); then
              echo "Reached max parallel downloads ($MAX_PARALLEL_DOWNLOADS), waiting for completion..."
              wait
              COUNTER=0
            fi
          done
          wait

      - name: Extract and check CRC32 for downloaded files
        run: |
          extract_with_retries() {
            file=$1
            retries=0
            until [ -f "$file" ]; do
              if (( retries >= 3 )); then
                echo "Error: File $file does not exist or is corrupted. Skipping."
                return 1
              fi
              retries=$((retries + 1))
              echo "Retrying extraction of $file ($retries/3)."
              sleep 2
            done

            if [[ "$file" =~ \.zip$ ]]; then
              unzip -q "$file" -d dloa/
            elif [[ "$file" =~ \.tar\.gz$ ]]; then
              tar -xzvf "$file" -C dloa/
            elif [[ "$file" =~ \.tar$ ]]; then
              tar -xvf "$file" -C dloa/
            elif [[ "$file" =~ \.rar$ ]]; then
              7z x "$file" -odloa
            else
              echo "Unknown file format for extraction: $file"
              return 1
            fi
            rm "$file"
            return 0
          }

          for file in dloa/*; do
            if [ -f "$file" ]; then
              extract_with_retries "$file"
              FILE_CRC32=$(crc32 "$file")
              echo "CRC32 for $file: $FILE_CRC32"
            fi
          done

      - name: Upload to GitHub Release
        if: ${{ inputs.destination == 'github' || inputs.destination == 'both' }}
        run: |
          for file in dloa/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file to GitHub release."
              gh release upload "${{ inputs.tag }}" "$file" --clobber
            fi
          done

      - name: Upload to Telegram
        if: ${{ inputs.destination == 'telegram' || inputs.destination == 'both' }}
        run: |
          for file in dloa/*; do
            if [ -f "$file" ]; then
              curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument" \
                -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
                -F document=@"$file"
            fi
          done
          
      - name: Upload to Mega.nz
        if: ${{ inputs.destination == 'mega' || inputs.destination == 'both' }}
        run: |
          for file in dloa/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file to Mega.nz (placeholder)"
              # Implement actual Mega API upload here
            fi
          done
        env:
          MEGA_API_KEY: ${{ secrets.MEGA_API_KEY }}

      - name: Upload to Google Drive
        if: ${{ inputs.destination == 'google_drive' || inputs.destination == 'both' }}
        run: |
          for file in dloa/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file to Google Drive (placeholder)"
              # Implement actual Google Drive API upload here
            fi
          done
        env:
          GOOGLE_DRIVE_API_KEY: ${{ secrets.GOOGLE_DRIVE_API_KEY }}

      - name: Upload to Dropbox
        if: ${{ inputs.destination == 'dropbox' || inputs.destination == 'both' }}
        run: |
          for file in dloa/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file to Dropbox (placeholder)"
              # Implement actual Dropbox API upload here
            fi
          done
        env:
          DROPBOX_API_KEY: ${{ secrets.DROPBOX_API_KEY }}

      - name: Final Message
        run: |
          echo "Files have been successfully uploaded to the chosen destinations."
