name: Upload file TG
on:
  workflow_dispatch:
    inputs:
      upl:
        description: 'Direct links separated by commas'
        required: true
        type: string
      compression:
        description: 'Compression method'
        required: false
        type: choice
        options:
          - none
          - tar
          - gzip
          - bzip2
          - xz
          - rar
          - 7z
          - zip
      compress_level:
        description: 'Compression level (1-9)'
        required: false
        type: string
        default: ''

permissions:
  contents: write
  actions: write

jobs:
  download:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Cached APT
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: aria2 gh p7zip-full xz-utils jq
          
      - name: Download files
        run: |
          set +x
          mkdir -p dloa
          IFS=$'\n'
          prepare_url() {
            local url="$1"
            if [[ ! "$url" =~ ^https?:// ]]; then
              url="https://$url"
            fi
            urls_to_try=("$url")
            if [[ ! "$url" =~ ^https?://www\. ]]; then
              urls_to_try+=("${url/https:\/\//https://www.}")
            fi
            echo "${urls_to_try[@]}"
          }
          echo "${{ github.event.inputs.upl }}" | tr ',' '\n' | while read -r url; do
            prepare_url "$url"
          done | tr ' ' '\n' | xargs -P 4 -I {} bash -c 'aria2c -x 16 -s 16 -d dloa --split=8 --max-connection-per-server=4 --min-split-size=5M --continue=true "$1" > /dev/null 2>&1 && exit 0' _ {}

      - name: File compression archive
        run: |
          set +x
          temp_dir=$(mktemp -d)
          if [ "${{ inputs.compression }}" != "none" ]; then
            for file in dloa/*; do
              filename=$(basename "$file")
              sanitized_filename=$(echo "$filename" | sed 's/[^a-zA-Z0-9._-]/_/g')
              case "${{ inputs.compression }}" in
                gzip) 
                  tar -cvf - "$file" | gzip -${{ inputs.compress_level }} > "$temp_dir/$sanitized_filename.tar.gz" 2>/dev/null
                  ;;
                bzip2) 
                  tar -cvf "$temp_dir/$sanitized_filename.tar" -C dloa "$filename" > /dev/null 2>&1
                  bzip2 -${{ inputs.compress_level }} "$temp_dir/$sanitized_filename.tar" > /dev/null 2>&1
                  ;;
                xz) 
                  tar -cvf "$temp_dir/$sanitized_filename.tar" -C dloa "$filename" > /dev/null 2>&1
                  xz -${{ inputs.compress_level }} "$temp_dir/$sanitized_filename.tar" > /dev/null 2>&1
                  ;;
               rar)  
                  7z a -m0=rar -mx${{ inputs.compress_level }} "$temp_dir/$sanitized_filename.rar" "$file" > /dev/null 2>&1
                  ;;
               7z) 
                  7z a -mx${{ inputs.compress_level }} "$temp_dir/$sanitized_filename.7z" "$file" > /dev/null 2>&1
                  ;;
               zip) 
                  7z a -tzip -mx${{ inputs.compress_level }} "$temp_dir/$sanitized_filename.zip" "$file" > /dev/null 2>&1
                  ;;
                tar) 
                  tar -cvf "$temp_dir/$sanitized_filename.tar" -C dloa "$filename" > /dev/null 2>&1
                  ;;  
               esac
            done
            rm -rf dloa/* > /dev/null 2>&1
            mv "$temp_dir"/* dloa/ > /dev/null 2>&1
            rmdir "$temp_dir" > /dev/null 2>&1
          fi

      - name: Send file to Telegram
        run: |
          set +x
          file_to_send=$(ls dloa | head -n 1)
          file_path="dloa/$file_to_send"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument" \
          -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -F document=@"$file_path" > /dev/null 2>&1

      - name: Clean up workspace
        run: |
          set +x
          rm -rf dloa
        continue-on-error: true

      - name: Get Run ID
        shell: bash
        run: |
          run_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs?per_page=1" \
              | jq -r ".workflow_runs[0].id")
          echo "Run ID is $run_id"

      - name: Delete Workflow Run
        shell: bash
        run: |
          curl -s -X DELETE \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/$run_id"
