name: Upload File (t)

on:
  workflow_dispatch:
    inputs:
      upl:
        description: 'Comma-separated URLs'
        required: true
        type: string
      tag:
        description: 'Tag'
        required: true
        type: string
      compression:
        description: 'Compression method'
        required: false
        type: choice
        options:
          - none
          - gzip
          - bzip2
          - xz
          - rar
          - 7z
          - zip
      compress_level:
        description: 'Compression level (1-9)'
        required: false
        type: number
        default: 6
      checksum:
        description: 'Enable CRC32 checksum verification'
        required: false
        type: boolean
        default: true

permissions:
  contents: write
  id-token: write
  actions: read

jobs:
  Upload_Files:
    name: 'Upload Files'
    runs-on: ubuntu-latest

    steps:
      - name: Create Cache Directories
        run: |
          mkdir -p /tmp/apt-cache
          mkdir -p ~/.cache/pip

      - name: Create Dependency Files
        run: |
          echo "crc32c" > requirements.txt
          echo "aria2 curl jq unzip p7zip-full rsync zip gzip bzip2 xz-utils parted genisoimage tar arj cabextract python3" > apt-requirements.txt

      - name: Generate Cache Keys Based on Dependency Files
        id: cache-keys
        run: |
          # Generate SHA256 hashes for dependency files
          apt_key=$(sha256sum apt-requirements.txt | awk '{print $1}')
          pip_key=$(sha256sum requirements.txt | awk '{print $1}')
          
          # Save keys as environment variables for use in caching steps
          echo "apt_key=${apt_key}" >> $GITHUB_ENV
          echo "pip_key=${pip_key}" >> $GITHUB_ENV

          echo "APT Cache Key: $apt_key"
          echo "PIP Cache Key: $pip_key"

      - name: Cache apt-get dependencies
        uses: actions/cache@v4
        id: apt-cache
        with:
          path: /tmp/apt-cache
          key: apt-cache-${{ env.apt_key }}
          restore-keys: |
            apt-cache-

      - name: Cache Python dependencies
        uses: actions/cache@v4
        id: pip-cache
        with:
          path: ~/.cache/pip
          key: pip-cache-${{ env.pip_key }}
          restore-keys: |
            pip-cache-

      - name: Install apt dependencies if needed
        if: steps.apt-cache.outputs.cache-hit != 'true'
        run: |
          echo "Installing apt dependencies..."
          sudo apt-get update
          sudo apt-get install -y $(cat apt-requirements.txt)
          echo "APT dependencies installed."

      - name: Install pip dependencies if needed
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: |
          echo "Installing pip dependencies..."
          pip3 install -r requirements.txt
          echo "PIP dependencies installed."

      - name: Download files
        run: |
          mkdir -p dloa
          IFS=',' read -r -a urls <<< "${{ inputs.upl }}"
          for url in "${urls[@]}"; do
            aria2c -d dloa -x 16 -s 16 --continue=true "$url" &
          done
          wait

      - name: Verify downloaded files
        run: |
          ls -lh dloa

      - name: Verify CRC32 checksum
        if: ${{ inputs.checksum == true }}
        run: |
          for file in dloa/*; do
            crc32_value=$(python3 -c "import zlib; print(f'{zlib.crc32(open(\"$file\", \"rb\").read()):08x}')")
            echo "File: $file, CRC32: $crc32_value"
          done

      - name: Check files
        run: |
          echo "Checking files without extracting..."
          for file in dloa/*; do
            case $file in
              *.tar.*)
                echo "Contents of TAR archive: $file"
                tar -tf "$file"
                ;;
              *.zip)
                echo "Contents of ZIP archive: $file"
                unzip -l "$file"
                ;;
              *.rar)
                echo "Contents of RAR archive: $file"
                7z l "$file"
                ;;
              *.7z)
                echo "Contents of 7z archive: $file"
                7z l "$file"
                ;;
              *.tar.gz|*.tgz)
                echo "Contents of TAR.GZ archive: $file"
                tar -tzf "$file"
                ;;
              *.tar.bz2)
                echo "Contents of TAR.BZ2 archive: $file"
                tar -tjf "$file"
                ;;
              *.tar.xz)
                echo "Contents of TAR.XZ archive: $file"
                tar -tJf "$file"
                ;;
              *.tar.Z)
                echo "Contents of TAR.Z archive: $file"
                tar -tZf "$file"
                ;;
              *.arj)
                echo "Contents of ARJ archive: $file"
                arj v "$file"
                ;;
              *.cab)
                echo "Contents of CAB archive: $file"
                cabextract -l "$file"
                ;;
              *.xz)
                echo "Contents of XZ archive: $file"
                xz -l "$file"
                ;;
              *.gz)
                echo "Contents of GZ archive: $file"
                gzip -l "$file"
                ;;
              *.bz2)
                echo "Contents of BZ2 archive: $file"
                bzip2 -l "$file"
                ;;
              *.iso)
                echo "Contents of ISO image: $file"
                isoinfo -i "$file" -l
                ;;
              *.img)
                echo "Checking partitions in IMG file: $file"
                parted "$file" print
                ;;
            esac
          done

      - name: File compression archive
        run: |
          echo "Compressing files..."
          if [ "${{ inputs.compression }}" != "none" ]; then
            case "${{ inputs.compression }}" in
              gzip) tar -cvzf "dloa_compressed.tar.gz" -C dloa . ;;
              bzip2) tar -cvjf "dloa_compressed.tar.bz2" -C dloa . ;;
              xz) tar -cvJf "dloa_compressed.tar.xz" -C dloa . ;;
              rar) 7z a -m0=rar -mx${{ inputs.compress_level }} "dloa_compressed.rar" "dloa/*" ;; 
              7z) 7z a -mx${{ inputs.compress_level }} "dloa_compressed.7z" "dloa/*" ;;
              zip) 7z a -tzip -mx${{ inputs.compress_level }} "dloa_compressed.zip" "dloa/*" ;;
            esac
          else
            echo "No compression selected."
          fi

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dloa/*
            dloa_compressed.*
          tag_name: ${{ inputs.tag }}

      - name: Confirm Upload
        run: |
          echo "Files uploaded to GitHub Release."
