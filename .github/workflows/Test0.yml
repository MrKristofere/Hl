name: Upload File (t)

on:
  workflow_dispatch:
    inputs:
      upl:
        description: 'Comma-separated URLs'
        required: true
        type: string
      tag:
        description: 'Tag'
        required: true
        type: string
      compression:
        description: 'Compression method'
        required: false
        type: choice
        options:
          - none
          - gzip
          - bzip2
          - xz
          - rar
          - 7z
          - zip
      compress_level:
        description: 'Compression level (1-9)'
        required: false
        type: number
        default: 6
      checksum:
        description: 'Enable CRC32 checksum verification'
        required: false
        type: boolean
        default: true

permissions:
  contents: write
  id-token: write
  actions: read

jobs:
  Upload_Files:
    name: 'Upload Files'
    runs-on: ubuntu-latest

    steps:
      - name: Ensure cache directories exist
        run: |
          mkdir -p ~/.cache/pip

      - name: Cache apt dependencies
        id: apt-cache
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: aria2 curl jq unzip p7zip-full rsync zip gzip bzip2 xz-utils parted genisoimage cdrtools tar arj cabextract python3-pip

      # Кеширование Python зависимостей
      - name: Cache Python dependencies
        id: pip-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/*') }}  # Аналогично для pip
          restore-keys: |
            ${{ runner.os }}-pip-

      # Установка зависимостей (если кеш не найден)
      - name: Install dependencies
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: |
          echo "Installing pip dependencies..."
          pip3 install crc32c
          echo "Dependencies installed."
      - name: Download files
        run: |
          mkdir -p dloa
          IFS=',' read -r -a urls <<< "${{ inputs.upl }}"
          for url in "${urls[@]}"; do
            aria2c -d dloa -x 16 -s 16 --continue=true "$url" &
          done
          wait

      - name: Verify downloaded files
        run: |
          ls -lh dloa

      - name: Verify CRC32 checksum
        if: ${{ inputs.checksum == true }}
        run: |
          for file in dloa/*; do
            crc32_value=$(python3 -c "import zlib; print(f'{zlib.crc32(open(\"$file\", \"rb\").read()):08x}')")
            echo "File: $file, CRC32: $crc32_value"
          done

      - name: Checking files without extracting...
      run: |
        echo "Checking files without extracting..."
        
        for file in dloa/*; do
          case $file in
            *.tar.*)
              echo "Contents of TAR archive: $file"
              tar -tf "$file" | while read filename; do
                if [[ -n "$filename" ]]; then
                  crc32_value=$(tar -xOf "$file" "$filename" | python3 -c "import zlib, sys; print(f'{zlib.crc32(sys.stdin.read()) & 0xffffffff:08x}')")
                  echo "File: $filename, CRC32: $crc32_value"
                else
                  echo "Skipping empty or non-existing file: $filename"
                fi
              done
              ;;
            *.zip)
              echo "Contents of ZIP archive: $file"
              unzip -l "$file" | awk 'NR>3 {print $4}' | while read filename; do
                if [[ -n "$filename" ]]; then
                  crc32_value=$(unzip -p "$file" "$filename" | python3 -c "import zlib, sys; print(f'{zlib.crc32(sys.stdin.read()) & 0xffffffff:08x}')")
                  echo "File: $filename, CRC32: $crc32_value"
                else
                  echo "Skipping empty or non-existing file: $filename"
                fi
              done
              ;;
            *.rar)
              echo "Contents of RAR archive: $file"
              7z l "$file" | awk 'NR>1 {print $6}' | while read filename; do
                if [[ -n "$filename" ]]; then
                  crc32_value=$(7z x -so "$file" "$filename" | python3 -c "import zlib, sys; print(f'{zlib.crc32(sys.stdin.read()) & 0xffffffff:08x}')")
                  echo "File: $filename, CRC32: $crc32_value"
                else
                  echo "Skipping empty or non-existing file: $filename"
                fi
              done
              ;;
            *.7z)
              echo "Contents of 7z archive: $file"
              7z l "$file" | awk 'NR>1 {print $6}' | while read filename; do
                if [[ -n "$filename" ]]; then
                  crc32_value=$(7z x -so "$file" "$filename" | python3 -c "import zlib, sys; print(f'{zlib.crc32(sys.stdin.read()) & 0xffffffff:08x}')")
                  echo "File: $filename, CRC32: $crc32_value"
                else
                  echo "Skipping empty or non-existing file: $filename"
                fi
              done
              ;;
            *.tar.gz|*.tgz)
              echo "Contents of TAR.GZ archive: $file"
              tar -tzf "$file" | while read filename; do
                if [[ -n "$filename" ]]; then
                  crc32_value=$(tar -xOf "$file" "$filename" | python3 -c "import zlib, sys; print(f'{zlib.crc32(sys.stdin.read()) & 0xffffffff:08x}')")
                  echo "File: $filename, CRC32: $crc32_value"
                else
                  echo "Skipping empty or non-existing file: $filename"
                fi
              done
              ;;
            *.tar.bz2)
              echo "Contents of TAR.BZ2 archive: $file"
              tar -tjf "$file" | while read filename; do
                if [[ -n "$filename" ]]; then
                  crc32_value=$(tar -xOf "$file" "$filename" | python3 -c "import zlib, sys; print(f'{zlib.crc32(sys.stdin.read()) & 0xffffffff:08x}')")
                  echo "File: $filename, CRC32: $crc32_value"
                else
                  echo "Skipping empty or non-existing file: $filename"
                fi
              done
              ;;
            *.tar.xz)
              echo "Contents of TAR.XZ archive: $file"
              tar -tJf "$file" | while read filename; do
                if [[ -n "$filename" ]]; then
                  crc32_value=$(tar -xOf "$file" "$filename" | python3 -c "import zlib, sys; print(f'{zlib.crc32(sys.stdin.read()) & 0xffffffff:08x}')")
                  echo "File: $filename, CRC32: $crc32_value"
                else
                  echo "Skipping empty or non-existing file: $filename"
                fi
              done
              ;;
            *.tar.Z)
              echo "Contents of TAR.Z archive: $file"
              tar -tZf "$file" | while read filename; do
                if [[ -n "$filename" ]]; then
                  crc32_value=$(tar -xOf "$file" "$filename" | python3 -c "import zlib, sys; print(f'{zlib.crc32(sys.stdin.read()) & 0xffffffff:08x}')")
                  echo "File: $filename, CRC32: $crc32_value"
                else
                  echo "Skipping empty or non-existing file: $filename"
                fi
              done
              ;;
            *.arj)
              echo "Contents of ARJ archive: $file"
              arj v "$file" | awk 'NR>2 {print $NF}' | while read filename; do
                if [[ -n "$filename" ]]; then
                  crc32_value=$(arj x -y -o/tmp "$file" "$filename" | python3 -c "import zlib, sys; print(f'{zlib.crc32(sys.stdin.read()) & 0xffffffff:08x}')")
                  echo "File: $filename, CRC32: $crc32_value"
                else
                  echo "Skipping empty or non-existing file: $filename"
                fi
              done
              ;;
            *.cab)
              echo "Contents of CAB archive: $file"
              cabextract -l "$file" | awk 'NR>1 {print $1}' | while read filename; do
                if [[ -n "$filename" ]]; then
                  crc32_value=$(cabextract -q "$file" "$filename" | python3 -c "import zlib, sys; print(f'{zlib.crc32(sys.stdin.read()) & 0xffffffff:08x}')")
                  echo "File: $filename, CRC32: $crc32_value"
                else
                  echo "Skipping empty or non-existing file: $filename"
                fi
              done
              ;;
            *.xz)
              echo "Contents of XZ archive: $file"
              xz -l "$file" | while read filename; do
                if [[ -n "$filename" ]]; then
                  crc32_value=$(xz -dc "$file" | python3 -c "import zlib, sys; print(f'{zlib.crc32(sys.stdin.read()) & 0xffffffff:08x}')")
                  echo "File: $filename, CRC32: $crc32_value"
                else
                  echo "Skipping empty or non-existing file: $filename"
                fi
              done
              ;;
            *.gz)
              echo "Contents of GZ archive: $file"
              gzip -l "$file" | while read filename; do
                if [[ -n "$filename" ]]; then
                  crc32_value=$(gzip -dc "$file" | python3 -c "import zlib, sys; print(f'{zlib.crc32(sys.stdin.read()) & 0xffffffff:08x}')")
                  echo "File: $filename, CRC32: $crc32_value"
                else
                  echo "Skipping empty or non-existing file: $filename"
                fi
              done
              ;;
            *.bz2)
              echo "Contents of BZ2 archive: $file"
              bzip2 -l "$file" | while read filename; do
                if [[ -n "$filename" ]]; then
                  crc32_value=$(bzip2 -dc "$file" | python3 -c "import zlib, sys; print(f'{zlib.crc32(sys.stdin.read()) & 0xffffffff:08x}')")
                  echo "File: $filename, CRC32: $crc32_value"
                else
                  echo "Skipping empty or non-existing file: $filename"
                fi
              done
              ;;
            *.img)
              echo "Contents of IMG file: $file"
              # Пример использования mount для IMG образов
              mkdir -p /tmp/img_mount
              sudo mount -o loop "$file" /tmp/img_mount
              ls /tmp/img_mount | while read filename; do
                if [[ -n "$filename" ]]; then
                  crc32_value=$(cat /tmp/img_mount/"$filename" | python3 -c "import zlib, sys; print(f'{zlib.crc32(sys.stdin.read()) & 0xffffffff:08x}')")
                  echo "File: $filename, CRC32: $crc32_value"
                else
                  echo "Skipping empty or non-existing file: $filename"
                fi
              done
              sudo umount /tmp/img_mount
              rmdir /tmp/img_mount
              ;;
            *)
              echo "Skipping unsupported file type: $file
              ;;
          esac
        done
        ;;      
              *.iso)
                echo "Contents of ISO image: $file"
                # List files in ISO using 7z
                7z l "$file" | awk 'NR>1 {print $6}' | while read filename; do
                  if [[ -n "$filename" ]]; then
                    # Calculate CRC32 for each file in ISO
                    crc32_value=$(7z x -so "$file" "$filename" | python3 -c "import zlib; import sys; print(f'{zlib.crc32(sys.stdin.read()) & 0xffffffff:08x}')")
                    echo "File: $filename, CRC32: $crc32_value"
                  else
                    echo "Skipping empty or non-existing file: $filename"
                  fi
                done
                ;;
              *)
                echo "Skipping unsupported file type: $file"
                ;;
            esac
          done       

      - name: File compression archive
        run: |          
          echo "Compressing files..."
          if [ "${{ inputs.compression }}" != "none" ]; then
            case "${{ inputs.compression }}" in
              gzip) tar -cvzf "dloa_compressed.tar.gz" -C dloa . ;;
              bzip2) tar -cvjf "dloa_compressed.tar.bz2" -C dloa . ;;
              xz) tar -cvJf "dloa_compressed.tar.xz" -C dloa . ;;
              rar) 7z a -m0=rar -mx${{ inputs.compress_level }} "dloa_compressed.rar" "dloa/*" ;; 
              7z) 7z a -mx${{ inputs.compress_level }} "dloa_compressed.7z" "dloa/*" ;;
              zip) 7z a -tzip -mx${{ inputs.compress_level }} "dloa_compressed.zip" "dloa/*" ;;
            esac
          else
            echo "No compression selected."
          fi

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dloa/*
            dloa_compressed.*
          tag_name: ${{ inputs.tag }}

      - name: Confirm Upload
        run: |
          echo "Files uploaded to GitHub Release."
