name: Upload file (тест)
on:
  workflow_dispatch:
    inputs:
      upl:
        description: 'Comma-separated URLs of files to download'
        required: true
        type: string
      tag:
        description: 'Tag for the release'
        required: true
        type: string
      compress:
        description: 'Compress files before upload (true/false)'
        required: false
        type: boolean

permissions:
  contents: write

jobs:
  upload:
    runs-on: ubuntu-latest
    steps:
      # Cache APT packages to speed up builds
      - name: Cache APT Packages
        uses: actions/cache@v2
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('**/apt-packages.txt') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      # Create a file listing the required packages
      - name: Create APT Packages List
        run: |
          echo "aria2" >> apt-packages.txt
          echo "curl" >> apt-packages.txt
          echo "unzip" >> apt-packages.txt
          echo "p7zip-full" >> apt-packages.txt
          echo "crc32" >> apt-packages.txt

      # Update the package list and install required dependencies if not cached
      - name: Install Dependencies
        run: |
          sudo apt-get update
          xargs -a apt-packages.txt sudo apt-get install -y

      # Download files in parallel using aria2c
      - name: Download Files
        run: |
          IFS=',' read -r -a urls <<< "${{ inputs.upl }}"
          for url in "${urls[@]}"; do
            aria2c --no-check-certificate -d dloa "$url" &
          done
          wait  # Wait for all background jobs to finish

      # Function to calculate CRC-32 checksum
      - name: Calculate CRC-32 Checksums
        id: crc32_check
        run: |
          cd dloa || exit 1
          for file in *; do
            if [ -f "$file" ]; then
              crc32 "$file" >> ../checksums.txt  # Store checksums in a file
            fi
            
            # If the file is a zip archive, unzip it and calculate CRC-32 for the extracted files
            if [[ "$file" == *.zip ]]; then
              unzip "$file" -d "${file%.zip}" && cd "${file%.zip}" || continue
              for inner_file in *; do
                crc32 "$inner_file" >> ../../checksums.txt  # Store checksums of extracted files
              done
              cd ..  # Go back to the parent directory after processing the archive
            fi
          done

      # Optionally compress files before uploading them to the release
      - name: Compress Files (if selected)
        if: ${{ inputs.compress == 'true' }}
        run: |
          tar -czf dloa.tar.gz -C dloa .

      # Upload Release with calculated checksums and optionally compressed files 
      - name: Upload Release in Parallel
        run: |
          FILES_TO_UPLOAD="dloa/*"
          if [ "${{ inputs.compress }}" == "true" ]; then 
            FILES_TO_UPLOAD="$FILES_TO_UPLOAD dloa.tar.gz"
          fi

          # Upload checksums.txt as well if it exists 
          if [ -f "checksums.txt" ]; then 
            FILES_TO_UPLOAD="$FILES_TO_UPLOAD checksums.txt"
          fi

          for file in $FILES_TO_UPLOAD; do 
            echo "Uploading $file..."
            gh release upload "${{ inputs.tag }}" "$file" --clobber &  # Upload each file in background 
          done 
          
          wait  # Wait for all background uploads to finish
